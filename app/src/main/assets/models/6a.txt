<!DOCTYPE HTML>
<html lang="en"> 

<!本文始まり>
<head>
<!サイトのタイトル>
<title>Example with Floor, Table, Box</title>
<script type="text/javascript" src="ownglMatrix1.js"></script>
<meta charset="utf-8"> 
<script id="shader-vs" type="x-shader/x-vertex">
attribute vec3 aVertexPosition;
attribute vec4 aVertexColor;
uniform mat4 uMVMatrix;
uniform mat4 uPMatrix; 
varying vec4 vColor;
void main() {
gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
vColor = aVertexColor; 
} 
</script>
<script id="shader-fs" type="x-shader/x-fragment">
precision mediump float;
varying vec4 vColor;
void main() {
gl_FragColor = vColor; 
} 
</script>
<script type="text/javascript">
//変数
var gl;
var canvas;
var shaderProgram;
var floorVertexPositionBuffer;
var floorVertexIndexBuffer;
var cubeVertexPositionBuffer;
var cubeVertexIndexBuffer;
var modelViewMatrix;
var projectionMatrix;
var modelViewMatrixStack;

/**キャンバスを作っているっぽい**/
function createGLContext(canvas) {
var names = ["webgl", "experimental-webgl"];
var context = null;
for (var i=0; i < names.length; i++) {
try {
context = canvas.getContext(names[i]);
} catch(e) {}
if (context) {
break;
} }
if (context) {
context.viewportWidth = canvas.width;   //幅
context.viewportHeight = canvas.height;  //高さ
} else {
alert("Failed to create WebGL context!");
}
return context;
}

/**影を読み込む？**/
function loadShaderFromDOM(id) {
var shaderScript = document.getElementById(id);
if (!shaderScript) {
return null;
}
var shaderSource = "";
var currentChild = shaderScript.firstChild;
while (currentChild) {
if (currentChild.nodeType == 3) { // 3 corresponds to TEXT_NODE
shaderSource += currentChild.textContent;
}
currentChild = currentChild.nextSibling;
}
var shader;
if (shaderScript.type == "x-shader/x-fragment") {
shader = gl.createShader(gl.FRAGMENT_SHADER);
} else if (shaderScript.type == "x-shader/x-vertex") {
shader = gl.createShader(gl.VERTEX_SHADER);
} else {
return null;
}
gl.shaderSource(shader, shaderSource);
gl.compileShader(shader);
if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
alert(gl.getShaderInfoLog(shader));
return null;
} 
return shader;
}

/**影のセットアップ**/
function setupShaders() {
var vertexShader = loadShaderFromDOM("shader-vs");
var fragmentShader = loadShaderFromDOM("shader-fs");
shaderProgram = gl.createProgram();
gl.attachShader(shaderProgram, vertexShader);
gl.attachShader(shaderProgram, fragmentShader);
gl.linkProgram(shaderProgram);
if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
alert("Failed to setup shaders");
}
gl.useProgram(shaderProgram);
shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition"); 
shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
shaderProgram.uniformMVMatrix = gl.getUniformLocation(shaderProgram, "uMVMatrix");
shaderProgram.uniformProjMatrix = gl.getUniformLocation(shaderProgram, "uPMatrix"); 
gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
modelViewMatrix = mat4.create(); 
projectionMatrix = mat4.create();
modelViewMatrixStack = [];
}


function pushModelViewMatrix() {
var copyToPush = mat4.create(modelViewMatrix);
modelViewMatrixStack.push(copyToPush);
}
function popModelViewMatrix() {
if (modelViewMatrixStack.length == 0) {
throw "Error popModelViewMatrix() - Stack was empty ";
}
modelViewMatrix = modelViewMatrixStack.pop();
}

/**フロアをセットアップ**/
function setupFloorBuffers() { 
floorVertexPositionBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, floorVertexPositionBuffer);
var floorVertexPosition = [
// Plane in y=0
5.0, 0.0, 5.0, //v0
5.0, 0.0, -5.0, //v1
-5.0, 0.0, -5.0, //v2
-5.0, 0.0, 5.0]; //v3
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(floorVertexPosition),
gl.STATIC_DRAW);
floorVertexPositionBuffer.itemSize = 3;
floorVertexPositionBuffer.numberOfItems = 4;
floorVertexIndexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, floorVertexIndexBuffer);
var floorVertexIndices = [0, 1, 2, 3]; 
gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(floorVertexIndices), 
gl.STATIC_DRAW);
floorVertexIndexBuffer.itemSize = 1;
floorVertexIndexBuffer.numberOfItems = 4;
}

/**四角を作る？**/
function setupCubeBuffers() {
cubeVertexPositionBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
var cubeVertexPosition = [
// Front face正面の頂点の座標
1.0, 1.0, 1.0, //v0
-1.0, 1.0, 1.0, //v1
-1.0, -1.0, 1.0, //v2
1.0, -1.0, 1.0, //v3
// Back face後ろの面
1.0, 1.0, -1.0, //v4
-1.0, 1.0, -1.0, //v5
-1.0, -1.0, -1.0, //v6
1.0, -1.0, -1.0, //v7
// Left face左の面
-1.0, 1.0, 1.0, //v8
-1.0, 1.0, -1.0, //v9
-1.0, -1.0, -1.0, //v10
-1.0, -1.0, 1.0, //v11
// Right face右の面
1.0, 1.0, 1.0, //12
1.0, -1.0, 1.0, //13
1.0, -1.0, -1.0, //14
1.0, 1.0, -1.0, //15
// Top face上の面
1.0, 1.0, 1.0, //v16
1.0, 1.0, -1.0, //v17
-1.0, 1.0, -1.0, //v18
-1.0, 1.0, 1.0, //v19
// Bottom face下の面
1.0, -1.0, 1.0, //v20
1.0, -1.0, -1.0, //v21
-1.0, -1.0, -1.0, //v22
-1.0, -1.0, 1.0, //v23
];

gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(cubeVertexPosition),
gl.STATIC_DRAW);
cubeVertexPositionBuffer.itemSize = 3;			//サイズ？
cubeVertexPositionBuffer.numberOfItems = 24; 
cubeVertexIndexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
var cubeVertexIndices = [
0, 1, 2, 0, 2, 3, // Front face
4, 6, 5, 4, 7, 6, // Back face
8, 9, 10, 8, 10, 11, // Left face
12, 13, 14, 12, 14, 15, // Right face
16, 17, 18, 16, 18, 19, // Top face
20, 22, 21, 20, 23, 22 // Bottom face
];

gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), 
gl.STATIC_DRAW);
cubeVertexIndexBuffer.itemSize = 1;
cubeVertexIndexBuffer.numberOfItems = 36;
}
function setupBuffers() {
setupFloorBuffers();
setupCubeBuffers();
}
function uploadModelViewMatrixToShader() {
gl.uniformMatrix4fv(shaderProgram.uniformMVMatrix, false, modelViewMatrix);
}
function uploadProjectionMatrixToShader() {
gl.uniformMatrix4fv(shaderProgram.uniformProjMatrix, 
false, projectionMatrix);
}

/*床を作る ここは触らなくてよさそう*/
function drawFloor(r,g,b,a) {
// Disable vertex attrib array and use constant color for the floor.
//頂点アトリビュート配列を無効にして、床の色を一定にしました。
gl.disableVertexAttribArray(shaderProgram.vertexColorAttribute);
// Set color色の設定
gl.vertexAttrib4f(shaderProgram.vertexColorAttribute, r, g, b, a);
// Draw the floor　フロアを描く
gl.bindBuffer(gl.ARRAY_BUFFER, floorVertexPositionBuffer);
gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, 
floorVertexPositionBuffer.itemSize, 
gl.FLOAT, false, 0, 0);
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, floorVertexIndexBuffer);
gl.drawElements(gl.TRIANGLE_FAN, floorVertexIndexBuffer.numberOfItems, 
gl.UNSIGNED_SHORT, 0);
}

/*キューブを作る　ここは触らなくてよさそう*/
function drawCube(r,g,b,a) {
// Disable vertex attrib array and use constant color for the cube.
//頂点アトリビュート配列を無効にして、キューブの色を一定にしました。
gl.disableVertexAttribArray(shaderProgram.vertexColorAttribute);
// Set color　色の設定
gl.vertexAttrib4f(shaderProgram.vertexColorAttribute, r, g, b, a);
gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, 
cubeVertexPositionBuffer.itemSize, 
gl.FLOAT, false, 0, 0);
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numberOfItems, 
gl.UNSIGNED_SHORT, 0);
}


/*テーブルを描写*/
function drawTable(){
// Draw table top　天板を描写する
pushModelViewMatrix();
mat4.translate(modelViewMatrix, [0.0, 1.0, 0.0], modelViewMatrix);
/*
　　おそらく[0.0, 1.0, 0.0]がテーブルの天板のどこかの角の座標を表しているみたいです．
　　下のコメントで書いたけど，足の長さを変えた場合は，個々の値を調整して天板の座標を足の上の座標と合わせる必要がありそう．
　　どんな感じか考えたけど思い浮かばなかったので，ここは画像を見ながら調整する方がいいかも．．．
*/
mat4.scale(modelViewMatrix, [2.0, 1.0, 4.0], modelViewMatrix); 
/*
  おそらく[2.0， 1.0, 4.0]がテーブルの天板の大きさを指定していると思われます．．．
　　画像を見た感じは，2.0と4.0の部分が縦横で，1.0の部分が高さぽいか
  値を変えてみたら，多分大きさが変わると思う
  */
uploadModelViewMatrixToShader();
// Draw the actual cube (now scaled to a cuboid) in brown color
drawCube(0.72, 0.53, 0.04, 1.0); // arguments set brown color　ここでテーブルの色を設定してるみたい！
/*
  （0.72, 0.53, 0.04, 1.0）　→　（赤の強さ，緑の強さ，青の強さ，(多分透明度，いじらなくて大丈夫そう)）
  紫にしたいとき：(1.00，　0.00，　1．00，　1.00)
  色の強さは，0.00～1.00までの0.01単位で設定，値が大きいほど強くなる．
  0~255で表してあるrgbの値はネットにいっぱい落ちてるから，それを255で割ったら好きな色が作れると思います！
  例）ピンク：赤255→1.00，　緑192→0.75，　青203→0.80   で行ける気がする...
*/

// Draw table legs　ここからテーブルの足を描写
popModelViewMatrix();
/*
　　下のforの横の括弧の中の想像ですが，iとjが-1と1の2つの値を持つようになっているので，足の座標は[i×1.9，　-0.1，　j×1.9]から，
　　1つ目(i=-1,j=-1のとき)[-1.9, -0.1, -1.9]
　　2つ目(i=-1,j=-1のとき)[-1.9, -0.1, 1.9]
　　3つ目(i=-1,j=-1のとき)[1.9, -0.1, -1.9]
　　4つ目(i=-1,j=-1のとき)[1.9, -0.1, 1.9]    になっているのかなと思います
*/
for (var i=-1; i<=1; i+=2) {
for (var j= -1; j<=1; j+=2) {
pushModelViewMatrix(); 
mat4.translate(modelViewMatrix, [i*1.9, -0.1, j*1.9], modelViewMatrix);
mat4.scale(modelViewMatrix, [0.2, 0.2, 0.2], modelViewMatrix);
/*
  ここも[0.2, 0.2, 0.2]が足の大きさを設定していると思います．
  おそらくどの値が縦横高さの大きさを表しているかは天板と一緒
  ただ，もしかしたら大きさを変えたら天板が浮いたり，天板を足が突き抜けたりする可能性あり
  天板自体の座標を変える必要がありそう
*/
uploadModelViewMatrixToShader();
drawCube(0.72, 0.53, 0.04, 1.0); // argument sets brown color　おそらくここでテーブルの足の色を設定
popModelViewMatrix();
}
} 
}


function draw() { 
gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
mat4.perspective(60, gl.viewportWidth / gl.viewportHeight, 
0.1, 100.0, projectionMatrix);
mat4.identity(modelViewMatrix);
mat4.lookAt([8, 5, -10],[0, 0, 0], [0, 1,0], modelViewMatrix);
uploadModelViewMatrixToShader();
uploadProjectionMatrixToShader(); 
// Draw floor in red color　床の色を設定，初期は赤
drawFloor(1.0, 0.0, 0.0, 1.0);  //ここも，上に書いたのと同じように床の色を変えられるはず

// Draw table　テーブルを描写
pushModelViewMatrix();
mat4.translate(modelViewMatrix, [0.0, 1.1, 0.0], modelViewMatrix);
uploadModelViewMatrixToShader();
drawTable();
popModelViewMatrix();

// Draw box on top of the table　机の上にある箱を描写
pushModelViewMatrix();
mat4.translate(modelViewMatrix, [0.0, 2.7 ,0.0], modelViewMatrix);  //おそらく座標，天板に合わせる必要がありそう
mat4.scale(modelViewMatrix, [0.5, 0.5, 0.5], modelViewMatrix);      //おそらく大きさ，縦横高さの設定はたぶんテーブルの例と同じ
uploadModelViewMatrixToShader();
drawCube(0.0, 0.0, 1.0, 1.0);			//箱の色の設定．これもテーブルと同じだと思う
popModelViewMatrix()

//addstart  これは何の物体を表しているか分からない...　色は青で箱と全く同じ大きさ，箱に接したところにある．箱は2つ置いてあるのかな
pushModelViewMatrix();
mat4.translate(modelViewMatrix, [0.0, 3.2 ,0.0], modelViewMatrix);
mat4.scale(modelViewMatrix, [0.5, 0.5, 0.5], modelViewMatrix);
uploadModelViewMatrixToShader();
drawCube(0.0, 0.0, 1.0, 1.0);
popModelViewMatrix()
//addend
}

/**多分キャンバスの設定**/
function startup() {
canvas = document.getElementById("myGLCanvas");
gl = WebGLDebugUtils.makeDebugContext(createGLContext(canvas));
setupShaders(); 
setupBuffers();
gl.clearColor(1.0, 1.0, 1.0, 1.0);			//背景色の設定，初期値は白．これもテーブルと同じように変えられるはず
gl.enable(gl.DEPTH_TEST);
draw(); 
}
</script>
</head>
<body onload="startup();">
<canvas id="myGLCanvas" width="500" height="500"></canvas>
</body>
</html>